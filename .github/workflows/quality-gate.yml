name: Backend Quality + Docker Build Pipeline

on:
  workflow_call:
    inputs:
      node_version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      package_manager:
        description: 'Package manager (npm or yarn)'
        required: false
        type: string
        default: 'yarn'
      lint_command:
        description: 'Lint command'
        required: false
        type: string
        default: 'yarn lint'
      type_check_command:
        description: 'TypeScript type check command'
        required: false
        type: string
        default: 'yarn test:types'
      build_command:
        description: 'Build command'
        required: false
        type: string
        default: 'yarn build'
      audit_command:
        description: 'Security audit command'
        required: false
        type: string
        default: 'yarn audit --level moderate'
      install_command:
        description: 'Install dependencies command'
        required: false
        type: string
        default: 'yarn install --frozen-lockfile'
      cache_dependency_path:
        description: 'Path to cache dependencies'
        required: false
        type: string
        default: 'yarn.lock'
      dev_port:
        description: 'Development port'
        required: false
        type: string
        default: '5050'
      prod_port:
        description: 'Production port'
        required: false
        type: string
        default: '5050'
      registry:
        description: 'Container registry'
        required: false
        type: string
        default: 'ghcr.io'
      skip_sonar:
        description: 'Skip SonarQube analysis'
        required: false
        type: boolean
        default: false
      skip_security:
        description: 'Skip security audit'
        required: false
        type: boolean
        default: false
      skip_docker:
        description: 'Skip Docker build'
        required: false
        type: boolean
        default: false
    secrets:
      SONAR_TOKEN:
        description: 'SonarQube token from consuming repository'
        required: false
      SONAR_HOST_URL:
        description: 'SonarQube host URL from consuming repository'
        required: false

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write
  packages: write

env:
  REGISTRY: ${{ inputs.registry }}

jobs:
  # Job 1: ESLint Check
  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}
          cache-dependency-path: ${{ inputs.cache_dependency_path }}

      - name: Install dependencies
        run: ${{ inputs.install_command }}

      - name: Run ESLint
        run: ${{ inputs.lint_command }}

  # Job 2: TypeScript Check
  typescript:
    name: TypeScript Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}
          cache-dependency-path: ${{ inputs.cache_dependency_path }}

      - name: Install dependencies
        run: ${{ inputs.install_command }}

      - name: Run TypeScript type check
        run: ${{ inputs.type_check_command }}

  # Job 3: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [eslint, typescript]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}
          cache-dependency-path: ${{ inputs.cache_dependency_path }}

      - name: Install dependencies
        run: ${{ inputs.install_command }}

      - name: Build project
        run: ${{ inputs.build_command }}
        env:
          NODE_OPTIONS: '--max_old_space_size=4096'

  # Job 4: Security Audit (runs in parallel, doesn't block Docker)
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_security }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}
          cache-dependency-path: ${{ inputs.cache_dependency_path }}

      - name: Install dependencies
        run: ${{ inputs.install_command }}

      - name: Run security audit
        run: |
          echo "🔍 Running security audit..."
          ${{ inputs.audit_command }} || echo "⚠️ Vulnerabilities found (exit code: $?)"
          echo "Audit completed - check results above"

  # Job 5: SonarQube Analysis (runs in parallel, doesn't block Docker)
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ !inputs.skip_sonar }}
    
    steps:
      - name: Check SonarQube configuration
        id: sonar_check
        run: |
          if [[ -z "${{ secrets.SONAR_TOKEN }}" ]]; then
            echo "skip_sonar=true" >> $GITHUB_OUTPUT
            echo "⚠️ SONAR_TOKEN not provided, skipping SonarQube analysis"
          else
            echo "skip_sonar=false" >> $GITHUB_OUTPUT
            echo "✅ SonarQube configuration found"
          fi

      - name: Checkout code
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}
          cache-dependency-path: ${{ inputs.cache_dependency_path }}

      - name: Install dependencies
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        run: ${{ inputs.install_command }}

      - name: Read SonarQube project key
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        id: sonar_config
        run: |
          if [[ -f "sonar-project.properties" ]]; then
            PROJECT_KEY=$(grep "^sonar.projectKey=" sonar-project.properties | cut -d'=' -f2 | tr -d ' ')
            echo "project_key=$PROJECT_KEY" >> $GITHUB_OUTPUT
            echo "Found SonarQube project key: $PROJECT_KEY"
          else
            PROJECT_KEY=$(echo "${{ github.repository }}" | tr '/' '-')
            echo "project_key=$PROJECT_KEY" >> $GITHUB_OUTPUT
            echo "No sonar-project.properties found, using repository name: $PROJECT_KEY"
          fi

      - name: SonarQube Scan
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate Check
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 6: Docker Build (only runs if ESLint, TypeScript, and Build pass)
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [eslint, typescript, build]
    if: ${{ !inputs.skip_docker }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Get package.json version
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current package.json version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        id: repo
        run: echo "name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Determine environment and tags
        id: meta
        run: |
          VERSION="${{ steps.package_version.outputs.version }}"
          
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "dockerfile=Dockerfile.prod" >> $GITHUB_OUTPUT
            echo "build_args=NODE_ENV=production" >> $GITHUB_OUTPUT
            echo "tags=${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:latest,${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:v$VERSION" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=develop" >> $GITHUB_OUTPUT
            echo "dockerfile=Dockerfile.dev" >> $GITHUB_OUTPUT
            echo "build_args=NODE_ENV=development" >> $GITHUB_OUTPUT
            echo "tags=${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:develop,${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:v$VERSION-dev" >> $GITHUB_OUTPUT
          else
            echo "environment=pr" >> $GITHUB_OUTPUT
            echo "dockerfile=Dockerfile.dev" >> $GITHUB_OUTPUT
            echo "build_args=NODE_ENV=development" >> $GITHUB_OUTPUT
            echo "tags=${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Dockerfiles
        run: |
          # Create production Dockerfile
          cat > Dockerfile.prod << 'EOF'
          # Production Dockerfile
          FROM node:${{ inputs.node_version }}-alpine AS base

          # Install dependencies only when needed
          FROM base AS deps
          RUN apk add --no-cache libc6-compat
          WORKDIR /app

          # Install dependencies based on the preferred package manager
          COPY package*.json ./
          RUN npm ci --only=production && npm cache clean --force

          # Rebuild the source code only when needed
          FROM base AS builder
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci

          COPY . .
          # Build the project
          RUN ${{ inputs.build_command }}

          # Production image, copy all the files and run the backend
          FROM base AS runner
          WORKDIR /app

          ENV NODE_ENV=production
          ENV PORT=${{ inputs.prod_port }}

          RUN addgroup --system --gid 1001 nodejs
          RUN adduser --system --uid 1001 backend

          # Copy application code (built JS files and other necessary files)
          COPY --from=builder --chown=backend:nodejs /app/dist ./dist
          COPY --from=builder --chown=backend:nodejs /app/*.js ./
          COPY --from=deps --chown=backend:nodejs /app/node_modules ./node_modules
          COPY --chown=backend:nodejs package*.json ./

          USER backend

          EXPOSE ${{ inputs.prod_port }}

          CMD ["npm", "start"]
          EOF

          # Create development Dockerfile
          cat > Dockerfile.dev << 'EOF'
          # Development Dockerfile
          FROM node:${{ inputs.node_version }}-alpine

          WORKDIR /app

          # Install dependencies
          COPY package*.json ./
          RUN npm install

          # Copy source code
          COPY . .

          ENV NODE_ENV=development
          ENV PORT=${{ inputs.dev_port }}

          EXPOSE ${{ inputs.dev_port }}

          # Use nodemon for development hot reloading
          CMD ["npm", "run", "start:dev"]
          EOF

      - name: Extract metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.meta.outputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: ${{ steps.meta.outputs.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image details
        run: |
          echo "Environment: ${{ steps.meta.outputs.environment }}"
          echo "Dockerfile: ${{ steps.meta.outputs.dockerfile }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Build Args: ${{ steps.meta.outputs.build_args }}"
          echo "Package Version: ${{ steps.package_version.outputs.version }}"

  # Job 7: PR Comments & Summary
  pr-summary:
    name: PR Quality Summary
    runs-on: ubuntu-latest
    needs: [eslint, typescript, build, security, sonarqube, docker-build]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read SonarQube project key
        id: sonar_config
        run: |
          if [[ -f "sonar-project.properties" ]]; then
            PROJECT_KEY=$(grep "^sonar.projectKey=" sonar-project.properties | cut -d'=' -f2 | tr -d ' ')
            echo "project_key=$PROJECT_KEY" >> $GITHUB_OUTPUT
            echo "Found SonarQube project key: $PROJECT_KEY"
          else
            PROJECT_KEY=$(echo "${{ github.repository }}" | tr '/' '-')
            echo "project_key=$PROJECT_KEY" >> $GITHUB_OUTPUT
            echo "No sonar-project.properties found, using repository name: $PROJECT_KEY"
          fi

      - name: PR Comment with Full Report
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.payload.pull_request.number;
            
            const eslintResult = '${{ needs.eslint.result }}';
            const typescriptResult = '${{ needs.typescript.result }}';
            const buildResult = '${{ needs.build.result }}';
            const securityResult = '${{ needs.security.result }}' || 'skipped';
            const sonarResult = '${{ needs.sonarqube.result }}' || 'skipped';
            const dockerResult = '${{ needs.docker-build.result }}' || 'skipped';
            const projectKey = '${{ steps.sonar_config.outputs.project_key }}';
            const skipSonar = '${{ inputs.skip_sonar }}' === 'true';
            const skipSecurity = '${{ inputs.skip_security }}' === 'true';
            const skipDocker = '${{ inputs.skip_docker }}' === 'true';
            
            const getEmoji = (result) => {
              if (result === 'skipped') return '⏭️';
              return result === 'success' ? '✅' : result === 'failure' ? '❌' : '⚪';
            };
            
            const coreChecksPassed = [eslintResult, typescriptResult, buildResult].every(result => result === 'success');
            const dockerBuildInfo = dockerResult === 'skipped' ? 'skipped (core checks failed)' : dockerResult;
            
            const comment = `## ⚙️ Backend Quality + Docker Pipeline Report
            
            | Check | Status | Result |
            |-------|--------|--------|
            | ESLint | ${getEmoji(eslintResult)} | ${eslintResult} |
            | TypeScript | ${getEmoji(typescriptResult)} | ${typescriptResult} |
            | Build | ${getEmoji(buildResult)} | ${buildResult} |
            | Security Audit | ${getEmoji(securityResult)} | ${securityResult} (informational) |
            | SonarQube Analysis | ${getEmoji(sonarResult)} | ${sonarResult} |
            | Docker Build | ${getEmoji(dockerResult)} | ${dockerBuildInfo} |
            
            ### 📋 Status:
            ${coreChecksPassed
              ? dockerResult === 'success' 
                ? '🎉 **All checks passed and Docker image built successfully!** Ready to deploy.'
                : '✅ **Core quality checks passed.** Docker build may have been skipped or failed.'
              : '⚠️ **Core quality checks failed.** Docker build was blocked to prevent broken images.'}
            
            ### 🐳 Docker Build Policy:
            - Docker build **only runs** if ESLint, TypeScript, and Build checks all pass
            - Security audit and SonarQube issues **do not block** Docker builds (informational only)
            - Failed core checks = No Docker image to prevent deploying broken code
            
            ---
            *Pipeline report updated at: ${new Date().toISOString()}*`;
            
            // Delete previous bot comments
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: pr_number,
            });
            
            for (const comment of comments.data) {
              if (comment.user.type === 'Bot' && comment.body.includes('⚙️ Backend Quality + Docker Pipeline Report')) {
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: comment.id,
                });
              }
            }
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: comment
            });
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 8: Overall Status Check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [eslint, typescript, build, security, sonarqube, docker-build]
    if: always()
    
    steps:
      - name: Check overall status
        run: |
          echo "=== Backend Quality + Docker Gate Results ==="
          echo "ESLint: ${{ needs.eslint.result }}"
          echo "TypeScript: ${{ needs.typescript.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "SonarQube: ${{ needs.sonarqube.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "=========================="
          
          # Core required checks (these must pass)
          core_failed=false
          
          if [[ "${{ needs.eslint.result }}" != "success" ]]; then
            echo "❌ ESLint check failed"
            core_failed=true
          fi
          
          if [[ "${{ needs.typescript.result }}" != "success" ]]; then
            echo "❌ TypeScript check failed"
            core_failed=true
          fi
          
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build check failed"
            core_failed=true
          fi
          
          # SonarQube check (only if not skipped)
          if [[ "${{ inputs.skip_sonar }}" != "true" ]]; then
            if [[ "${{ needs.sonarqube.result }}" != "success" && "${{ needs.sonarqube.result }}" != "skipped" ]]; then
              echo "❌ SonarQube check failed"
              core_failed=true
            fi
          else
            echo "ℹ️ SonarQube check skipped"
          fi
          
          # Docker build status (informational)
          if [[ "${{ inputs.skip_docker }}" != "true" ]]; then
            if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
              echo "✅ Docker image built successfully"
            elif [[ "${{ needs.docker-build.result }}" == "failure" ]]; then
              echo "⚠️ Docker build failed (but core checks passed)"
            else
              echo "ℹ️ Docker build skipped (core checks failed)"
            fi
          else
            echo "ℹ️ Docker build skipped"
          fi
          
          if [[ "$core_failed" == "true" ]]; then
            echo "❌ Quality Gate FAILED - Core checks must pass"
            echo "Note: Security audit is informational only"
            exit 1
          else
            echo "✅ Quality Gate PASSED - Core checks successful"
          fi
