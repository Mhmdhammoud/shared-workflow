name: Code Quality + Docker Build Pipeline

on:
  workflow_call:
    inputs:
      node_version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      package_manager:
        description: 'Package manager (npm or yarn)'
        required: false
        type: string
        default: 'yarn'
      lint_command:
        description: 'Lint command'
        required: false
        type: string
        default: 'yarn lint'
      type_check_command:
        description: 'TypeScript type check command'
        required: false
        type: string
        default: 'yarn test:types'
      build_command:
        description: 'Build command'
        required: false
        type: string
        default: 'yarn build'
      audit_command:
        description: 'Security audit command'
        required: false
        type: string
        default: 'yarn audit --level moderate'
      install_command:
        description: 'Install dependencies command'
        required: false
        type: string
        default: 'yarn install --frozen-lockfile'
      cache_dependency_path:
        description: 'Path to cache dependencies'
        required: false
        type: string
        default: 'yarn.lock'
      dev_port:
        description: 'Development port'
        required: false
        type: string
        default: '5050'
      prod_port:
        description: 'Production port'
        required: false
        type: string
        default: '5050'
      registry:
        description: 'Container registry'
        required: false
        type: string
        default: 'ghcr.io'
      skip_sonar:
        description: 'Skip SonarQube analysis'
        required: false
        type: boolean
        default: false
      skip_security:
        description: 'Skip security audit'
        required: false
        type: boolean
        default: false
      skip_docker:
        description: 'Skip Docker build'
        required: false
        type: boolean
        default: false
      skip_build:
        description: 'Skip build step'
        required: false
        type: boolean
        default: false
    secrets:
      SONAR_TOKEN:
        description: 'SonarQube token from consuming repository'
        required: false
      SONAR_HOST_URL:
        description: 'SonarQube host URL from consuming repository'
        required: false

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write
  packages: write

env:
  REGISTRY: ${{ inputs.registry }}

jobs:
  # Job 1: ESLint Check
  eslint:
    name: ESLint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}
          cache-dependency-path: ${{ inputs.cache_dependency_path }}

      - name: Cache ESLint
        uses: actions/cache@v4.2.3
        with:
          path: .eslintcache
          key: eslint-${{ runner.os }}-${{ hashFiles('.eslintrc*', 'eslint.config.*', 'package.json', 'src/**/*.ts', 'src/**/*.tsx', 'src/**/*.js', 'src/**/*.jsx') }}
          restore-keys: |
            eslint-${{ runner.os }}-

      - name: Install dependencies
        run: ${{ inputs.install_command }}

      - name: Run ESLint
        run: ${{ inputs.lint_command }} --cache

  # Job 2: TypeScript Check
  typescript:
    name: TypeScript Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}
          cache-dependency-path: ${{ inputs.cache_dependency_path }}

      - name: Cache TypeScript Build Info
        uses: actions/cache@v4.2.3
        with:
          path: |
            tsconfig.tsbuildinfo
            .tsbuildinfo
            **/*.tsbuildinfo
          key: tsc-${{ runner.os }}-${{ hashFiles('src/**/*.ts', 'src/**/*.tsx', 'tsconfig*.json', 'package.json') }}
          restore-keys: |
            tsc-${{ runner.os }}-

      - name: Install dependencies
        run: ${{ inputs.install_command }}

      - name: Run TypeScript type check
        run: ${{ inputs.type_check_command }}

  # Job 3: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [eslint, typescript]
    if: ${{ !inputs.skip_build }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}
          cache-dependency-path: ${{ inputs.cache_dependency_path }}

      - name: Cache Build Output
        uses: actions/cache@v4.2.3
        with:
          path: |
            dist/
            build/
            .next/
            out/
          key: build-${{ runner.os }}-${{ hashFiles('package*.json', 'yarn.lock', 'pnpm-lock.yaml', 'src/**/*', 'tsconfig*.json', 'vite.config.*', 'webpack.config.*', 'next.config.*') }}
          restore-keys: |
            build-${{ runner.os }}-

      - name: Install dependencies
        run: ${{ inputs.install_command }}

      - name: Build project
        run: ${{ inputs.build_command }}
        env:
          NODE_OPTIONS: '--max_old_space_size=4096'

  # Job 4: Security Audit (runs in parallel, doesn't block Docker)
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_security }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}
          cache-dependency-path: ${{ inputs.cache_dependency_path }}

      - name: Install dependencies
        run: ${{ inputs.install_command }}

      - name: Run security audit
        run: |
          echo "🔍 Running security audit..."
          ${{ inputs.audit_command }} || echo "⚠️ Vulnerabilities found (exit code: $?)"
          echo "Audit completed - check results above"

  # Job 5: SonarQube Analysis (runs in parallel, doesn't block Docker)
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [eslint, typescript]
    if: ${{ !inputs.skip_sonar }}

    steps:
      - name: Check SonarQube configuration
        id: sonar_check
        run: |
          if [[ -z "${{ secrets.SONAR_TOKEN }}" ]]; then
            echo "skip_sonar=true" >> $GITHUB_OUTPUT
            echo "⚠️ SONAR_TOKEN not provided, skipping SonarQube analysis"
          else
            echo "skip_sonar=false" >> $GITHUB_OUTPUT
            echo "✅ SonarQube configuration found"
          fi

      - name: Checkout code
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}
          cache-dependency-path: ${{ inputs.cache_dependency_path }}

      - name: Cache SonarQube Scanner
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.sonar/cache
            .scannerwork/
          key: sonar-${{ runner.os }}-${{ hashFiles('src/**/*', 'sonar-project.properties') }}
          restore-keys: |
            sonar-${{ runner.os }}-

      - name: Install dependencies
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        run: ${{ inputs.install_command }}

      - name: Read SonarQube project key
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        id: sonar_config
        run: |
          if [[ -f "sonar-project.properties" ]]; then
            PROJECT_KEY=$(grep "^sonar.projectKey=" sonar-project.properties | cut -d'=' -f2 | tr -d ' ')
            echo "project_key=$PROJECT_KEY" >> $GITHUB_OUTPUT
            echo "Found SonarQube project key: $PROJECT_KEY"
          else
            PROJECT_KEY=$(echo "${{ github.repository }}" | tr '/' '-')
            echo "project_key=$PROJECT_KEY" >> $GITHUB_OUTPUT
            echo "No sonar-project.properties found, using repository name: $PROJECT_KEY"
          fi

      - name: SonarQube Scan
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate Check
        if: steps.sonar_check.outputs.skip_sonar == 'false'
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 6: Docker Build (only depends on core quality checks: eslint, typescript, and optionally build)
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [eslint, typescript, build]
    if: ${{ !inputs.skip_docker && (success() || (inputs.skip_build && needs.eslint.result == 'success' && needs.typescript.result == 'success')) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Get package.json version
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current package.json version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        id: repo
        run: echo "name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Determine environment and tags
        id: meta
        run: |
          VERSION="${{ steps.package_version.outputs.version }}"

          # Check if this is a push event (merge) or pull request event
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # This is a push/merge event
            if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "dockerfile=Dockerfile.prod" >> $GITHUB_OUTPUT
              echo "build_args=NODE_ENV=production" >> $GITHUB_OUTPUT
              echo "tags=${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:latest,${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:v$VERSION" >> $GITHUB_OUTPUT
            elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
              echo "environment=develop" >> $GITHUB_OUTPUT
              echo "dockerfile=Dockerfile.dev" >> $GITHUB_OUTPUT
              echo "build_args=NODE_ENV=development" >> $GITHUB_OUTPUT
              echo "tags=${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:develop,${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:v$VERSION-dev" >> $GITHUB_OUTPUT
            else
              # Push to other branches (shouldn't happen with your trigger, but just in case)
              echo "environment=feature" >> $GITHUB_OUTPUT
              echo "dockerfile=Dockerfile.dev" >> $GITHUB_OUTPUT
              echo "build_args=NODE_ENV=development" >> $GITHUB_OUTPUT
              echo "tags=${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
            fi
          else
            # This is a pull request event
            echo "environment=pr" >> $GITHUB_OUTPUT
            echo "dockerfile=Dockerfile.dev" >> $GITHUB_OUTPUT
            echo "build_args=NODE_ENV=development" >> $GITHUB_OUTPUT
            echo "tags=${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Check Dockerfiles exist
        run: |
          if [[ ! -f "Dockerfile.prod" ]]; then
            echo "❌ Dockerfile.prod not found in repository root"
            exit 1
          fi
          if [[ ! -f "Dockerfile.dev" ]]; then
            echo "❌ Dockerfile.dev not found in repository root"
            exit 1
          fi
          echo "✅ Both Dockerfiles found"

      - name: Extract metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.meta.outputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: ${{ steps.meta.outputs.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image details
        run: |
          echo "Environment: ${{ steps.meta.outputs.environment }}"
          echo "Dockerfile: ${{ steps.meta.outputs.dockerfile }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Build Args: ${{ steps.meta.outputs.build_args }}"
          echo "Package Version: ${{ steps.package_version.outputs.version }}"

  # Job 7: PR Comments & Summary
  pr-summary:
    name: PR Quality Summary
    runs-on: ubuntu-latest
    needs: [eslint, typescript, build, security, sonarqube]
    if: always() && github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read SonarQube project key
        id: sonar_config
        run: |
          if [[ -f "sonar-project.properties" ]]; then
            PROJECT_KEY=$(grep "^sonar.projectKey=" sonar-project.properties | cut -d'=' -f2 | tr -d ' ')
            echo "project_key=$PROJECT_KEY" >> $GITHUB_OUTPUT
            echo "Found SonarQube project key: $PROJECT_KEY"
          else
            PROJECT_KEY=$(echo "${{ github.repository }}" | tr '/' '-')
            echo "project_key=$PROJECT_KEY" >> $GITHUB_OUTPUT
            echo "No sonar-project.properties found, using repository name: $PROJECT_KEY"
          fi

      - name: Checkout shared workflow repository
        uses: actions/checkout@v4
        with:
          repository: mhmdhammoud/shared-workflow
          ref: master
          path: shared-workflow
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js for script
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Install script dependencies
        run: npm install
        working-directory: shared-workflow/.github/scripts

      - name: Generate PR Comment
        run: node shared-workflow/.github/scripts/pr-comment.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ESLINT_RESULT: ${{ needs.eslint.result }}
          TYPESCRIPT_RESULT: ${{ needs.typescript.result }}
          BUILD_RESULT: ${{ needs.build.result }}
          SECURITY_RESULT: ${{ needs.security.result }}
          SONAR_RESULT: ${{ needs.sonarqube.result }}
          DOCKER_RESULT: ${{ needs.docker-build.result }}
          PROJECT_KEY: ${{ steps.sonar_config.outputs.project_key }}
          SKIP_SONAR: ${{ inputs.skip_sonar }}
          SKIP_SECURITY: ${{ inputs.skip_security }}
          SKIP_DOCKER: ${{ inputs.skip_docker }}
          SKIP_BUILD: ${{ inputs.skip_build }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 8: Overall Status Check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [eslint, typescript, build, security, sonarqube, docker-build]
    if: always()

    steps:
      - name: Check overall status
        run: |
          echo "=== Backend Quality + Docker Gate Results ==="
          echo "ESLint: ${{ needs.eslint.result }}"
          echo "TypeScript: ${{ needs.typescript.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "SonarQube: ${{ needs.sonarqube.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "=========================="

          # Core required checks (these must pass)
          core_failed=false

          if [[ "${{ needs.eslint.result }}" != "success" ]]; then
            echo "❌ ESLint check failed"
            core_failed=true
          fi

          if [[ "${{ needs.typescript.result }}" != "success" ]]; then
            echo "❌ TypeScript check failed"
            core_failed=true
          fi

          # Build check (only if not skipped)
          if [[ "${{ inputs.skip_build }}" != "true" ]]; then
            if [[ "${{ needs.build.result }}" != "success" ]]; then
              echo "❌ Build check failed"
              core_failed=true
            fi
          else
            echo "ℹ️ Build check skipped"
          fi

          # SonarQube check is now informational only - does NOT block pipeline
          if [[ "${{ inputs.skip_sonar }}" != "true" ]]; then
            if [[ "${{ needs.sonarqube.result }}" == "success" ]]; then
              echo "✅ SonarQube analysis completed successfully (informational)"
            elif [[ "${{ needs.sonarqube.result }}" == "failure" ]]; then
              echo "⚠️ SonarQube analysis failed (informational only - does not block pipeline)"
            else
              echo "ℹ️ SonarQube analysis skipped"
            fi
          else
            echo "ℹ️ SonarQube check skipped"
          fi

          # Security audit is informational only
          if [[ "${{ inputs.skip_security }}" != "true" ]]; then
            if [[ "${{ needs.security.result }}" == "success" ]]; then
              echo "✅ Security audit completed (informational)"
            elif [[ "${{ needs.security.result }}" == "failure" ]]; then
              echo "⚠️ Security vulnerabilities found (informational only - does not block pipeline)"
            else
              echo "ℹ️ Security audit skipped"
            fi
          else
            echo "ℹ️ Security audit skipped"
          fi

          # Docker build status (informational)
          if [[ "${{ inputs.skip_docker }}" != "true" ]]; then
            if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
              echo "✅ Docker image built successfully"
            elif [[ "${{ needs.docker-build.result }}" == "failure" ]]; then
              echo "⚠️ Docker build failed (but core checks passed)"
            else
              echo "ℹ️ Docker build skipped (core checks failed)"
            fi
          else
            echo "ℹ️ Docker build skipped"
          fi

          if [[ "$core_failed" == "true" ]]; then
            echo "❌ Quality Gate FAILED - Core checks must pass"
            echo "Note: SonarQube and Security audits are informational only"
            exit 1
          else
            echo "✅ Quality Gate PASSED - Core checks successful"
            echo "Note: SonarQube and Security results are available for review but do not affect pipeline status"
          fi
